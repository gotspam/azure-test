{
	"$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
	"contentVersion": "1.2.0.0",
	"parameters": {
		"dnsLabel": {
			"defaultValue": "appDns",
			"metadata": {
				"description": "Unique DNS name for the public IP address used to access the virtual machine."
			},
			"type": "string"
		},
		"nsg0": {
            "defaultValue": [
				{
					"destinationPortRanges": ["22","8443"],
					"sourceAddressPrefix": ""
				},
				{
					"destinationPortRanges": ["80","443"],
					"sourceAddressPrefix": ""
				}
			],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
		"nsg1": {
            "defaultValue": [
				{
					"destinationPortRanges": ["80","443"],
					"sourceAddressPrefix": ""
				}
			],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
		"nsg2": {
            "defaultValue": [
				{
					"destinationPortRanges": ["80","443"],
					"sourceAddressPrefix": ""
				}
			],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
		"numberPublicExternalIPAddresses": {
			"defaultValue": 1,
			"allowedValues": [
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"metadata": {
				"description": "Enter the number of public external ip address to create. At least one is required to build ELB."
			},
			"type": "int"
		},
		"numberPublicMgmtIPAddresses": {
			"defaultValue": 0,
			"allowedValues": [
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"metadata": {
				"description": "Enter the number of public mgmt ip addresses to create."
			},
			"type": "int"
		},
		"tagValues": {
			"defaultValue": {
				"application": "APP",
				"cost": "COST",
				"environment": "ENV",
				"group": "GROUP",
				"owner": "OWNER"
			},
			"metadata": {
				"description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
			},
			"type": "object"
		}
	},
	"variables": {
		"copy": [
			{
				"count": "[parameters('numberPublicExternalIPAddresses')]",
				"input": {
					"name": "[concat('FrontEnd', copyIndex('constructFrontEndIPConfigID'))]",
					"properties": {
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('dnsLabel'), '-app-pip', copyIndex('constructFrontEndIPConfigID')))]"
						}
					}
				},
				"name": "constructFrontEndIPConfigID"
			},
			{
				"count": "[variables('nsg0Length')]",
				"input": {
					"name": "[concat('nsg0_allow_', copyIndex('constructNsg0Array'))]",
					"properties": {
						"access": "Allow",
						"description": "NSG0 Allow",
						"destinationAddressPrefix": "*",
						"destinationPortRanges": "[parameters('nsg0')[copyIndex('constructNsg0Array')].destinationPortRanges]",
						"direction": "Inbound",
						"priority": "[int(concat('10', copyIndex('constructNsg0Array')))]",
						"protocol": "Tcp",
						"sourceAddressPrefix": "[parameters('nsg0')[copyIndex('constructNsg0Array')].sourceAddressPrefix]",
						"sourcePortRange": "*"
					}
				},
				"name": "constructNsg0Array"
			},
			{
				"count": "[variables('nsg1Length')]",
				"input": {
					"name": "[concat('nsg1_allow_', copyIndex('constructNsg1Array'))]",
					"properties": {
						"access": "Allow",
						"description": "NSG1 Allow",
						"destinationAddressPrefix": "*",
						"destinationPortRanges": "[parameters('nsg1')[copyIndex('constructNsg1Array')].destinationPortRanges]",
						"direction": "Inbound",
						"priority": "[int(concat('10', copyIndex('constructNsg1Array')))]",
						"protocol": "Tcp",
						"sourceAddressPrefix": "[parameters('nsg1')[copyIndex('constructNsg1Array')].sourceAddressPrefix]",
						"sourcePortRange": "*"
					}
				},
				"name": "constructNsg1Array"
			},
			{
				"count": "[variables('nsg2Length')]",
				"input": {
					"name": "[concat('nsg2_allow_', copyIndex('constructNsg2Array'))]",
					"properties": {
						"access": "Allow",
						"description": "NSG2 Allow",
						"destinationAddressPrefix": "*",
						"destinationPortRanges": "[parameters('nsg2')[copyIndex('constructNsg2Array')].destinationPortRanges]",
						"direction": "Inbound",
						"priority": "[int(concat('10', copyIndex('constructNsg2Array')))]",
						"protocol": "Tcp",
						"sourceAddressPrefix": "[parameters('nsg2')[copyIndex('constructNsg2Array')].sourceAddressPrefix]",
						"sourcePortRange": "*"
					}
				},
				"name": "constructNsg2Array"
			}
		],
		"dnsLabel": "[toLower(parameters('dnsLabel'))]",
		"networkApiVersion": "2019-04-01",
		"nsg0Array": "[variables('constructNsg0Array')]",
		"nsg0Length": "[length(parameters('nsg0'))]",
		"nsg0Name": "[concat(variables('dnsLabel'), '-nsg0')]",
		"nsg1Array": "[variables('constructNsg1Array')]",
		"nsg1Length": "[length(parameters('nsg1'))]",
		"nsg1Name": "[concat(variables('dnsLabel'), '-nsg1')]",
		"nsg2Array": "[variables('constructNsg2Array')]",
		"nsg2Length": "[length(parameters('nsg2'))]",
		"nsg2Name": "[concat(variables('dnsLabel'), '-nsg2')]"
	},
	"resources": [
		{
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsg0Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[variables('nsg0Array')]"
            },
            "condition": "[not(empty(parameters('nsg0')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsg1Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[variables('nsg1Array')]"
            },
            "condition": "[not(empty(parameters('nsg1')))]"
        },
		{
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsg2Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[variables('nsg2Array')]"
            },
            "condition": "[not(empty(parameters('nsg2')))]"
        },
		{
			"apiVersion": "[variables('networkApiVersion')]",
			"condition": "[greater(parameters('numberPublicMgmtIPAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicMgmtIPAddresses')]",
				"name": "mgmtpipcopy"
			},
			"location": "[resourceGroup().location]",
			"name": "[concat(variables('dnsLabel'), '-mgmt-pip', copyIndex())]",
			"properties": {
				"dnsSettings": {
					"domainNameLabel": "[concat(variables('dnsLabel'), '-mgmt', copyIndex(0))]"
				},
				"idleTimeoutInMinutes": 30,
				"publicIPAllocationMethod": "Static"
			},
			"sku": {
				"name": "Standard"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.Network/publicIPAddresses"
		},
		{
			"apiVersion": "[variables('networkApiVersion')]",
			"condition": "[greater(parameters('numberPublicExternalIPAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIPAddresses')]",
				"name": "apppipcopy"
			},
			"location": "[resourceGroup().location]",
			"name": "[concat(variables('dnsLabel'), '-app-pip', copyIndex())]",
			"properties": {
				"dnsSettings": {
					"domainNameLabel": "[concat(variables('dnsLabel'), '-app', copyIndex(0))]"
				},
				"idleTimeoutInMinutes": 30,
				"publicIPAllocationMethod": "Static"
			},
			"sku": {
				"name": "Standard"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.Network/publicIPAddresses"
		}
	],
	"outputs": {
		"externalIpIds": {
			"condition": "[greater(parameters('numberPublicExternalIPAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIPAddresses')]",
				"input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('dnsLabel'), '-app-pip', copyIndex()))]"
			},
			"type": "array"
		},
		"externalIps": {
			"condition": "[greater(parameters('numberPublicExternalIPAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIPAddresses')]",
				"input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('dnsLabel'), '-app-pip', copyIndex()))).ipAddress]"
			},
			"type": "array"
		},
		"mgmtIpIds": {
			"condition": "[greater(parameters('numberPublicMgmtIPAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicMgmtIPAddresses')]",
				"input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('dnsLabel'), '-mgmt-pip', copyIndex()))]"
			},
			"type": "array"
		},
		"mgmtIps": {
			"condition": "[greater(parameters('numberPublicMgmtIPAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicMgmtIPAddresses')]",
				"input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('dnsLabel'), '-mgmt-pip', copyIndex()))).ipAddress]"
			},
			"type": "array"
		},
		"nsg0Id": {
            "condition": "[not(empty(parameters('nsg0')))]",
            "type": "String",
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg0Name'))]"
        },
		"nsg1Id": {
            "condition": "[not(empty(parameters('nsg1')))]",
            "type": "String",
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg1Name'))]"
        },
		"nsg2Id": {
            "condition": "[not(empty(parameters('nsg2')))]",
            "type": "String",
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg2Name'))]"
        }
	}
}