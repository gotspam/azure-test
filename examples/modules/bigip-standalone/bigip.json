{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.2.0.0",
  "parameters": {
    "adminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username applied to big-ip Virtual Machine."
      },
      "type": "string"
    },
    "appInsights": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter the name you wish to use to create an Application Insights component. Leave default if you do not wish to create one."
      },
      "type": "string"
    },
    "customEmail": {
      "defaultValue": [],
      "metadata": {
        "description": "Enter string array of email addresses to be notified when scale up or scale down occurs. Example: ['myemail@email.com','meyemail2@email.com']."
      },
      "type": "array"
    },
    "dnsLabel": {
      "defaultValue": "appDns",
      "metadata": {
        "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
      },
      "type": "string"
    },
    "image": {
      "defaultValue": "f5-networks:f5-big-ip-best:f5-bigip-virtual-edition-25m-best-hourly:15.1.002000",
      "metadata": {
        "description": "2 formats accepted. URN of the image to use in Azure marketplace or id of custom image. Example URN value: f5-networks:f5-big-ip-byol:f5-big-ltm-2slot-byol:15.1.002000. You can find the URNs of F5 marketplace images in the README for this template or by running the command: az vm image list --output yaml --publisher f5-networks --all. See https://clouddocs.f5.com/cloud/public/v1/azure/Azure_download.html for information on creating custom bigip image."
      },
      "type": "string"
    },
    "instanceType": {
      "defaultValue": "Standard_DS4_v2",
      "metadata": {
        "description": "Enter valid instance type."
      },
      "type": "string"
    },
    "mgmtIpAddress": {
      "defaultValue": "DYNAMIC",
      "metadata": {
        "description": "MGMT subnet IP Address to use for the BIG-IP management IP address. Leave the default DYNAMIC to use a dynamically assigned IP address."
      },
      "type": "string"
    },
    "nsgId": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter security group id to use. Use default if you do not wish to apply an NSG policy."
      },
      "type": "string"
    },
    "publicIPAddressId": {
      "defaultValue": "",
      "metadata": {
        "description": "Public IP address resource ID for the BIG-IP instance."
      },
      "type": "string"
    },
    "roleDefinitionId": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter a role definition id you wish to add to system managed identity. Leave default if system managed identity is not used."
      },
      "type": "string"
    },
    "runtimeConfig": {
      "metadata": {
        "description": "Url to bigip-runtime-init configuration file or json string to use for configuration file."
      },
      "type": "string"
    },
    "sshKey": {
      "metadata": {
        "description": "Supply ssh public key you wish to use to connect to big-ip."
      },
      "type": "string"
    },
    "subnetId": {
      "metadata": {
        "description": "Enter subnet id to use."
      },
      "type": "string"
    },
    "tagValues": {
      "defaultValue": {
        "application": "APP",
        "cost": "COST",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    },
    "updateTag": {
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Creates a unique timestamp for this deployment. Do not modify this value."
      },
      "type": "string"
    },
    "useAvailabilityZones": {
      "defaultValue": "Yes",
      "metadata": {
        "description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set 'No'. If the region does not support availability zones the input should be set to No."
      },
      "type": "bool"
    },
    "userAssignManagedIdentity": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter user assigned management identity Id to be associated to vm. Leave default if not used."
      },
      "type": "string"
    },
    "vmName": {
      "defaultValue": "bigip-vm",
      "metadata": {
        "description": "Name to use for Virtual Machine."
      },
      "type": "string"
    },
    "zoneChoice": {
      "defaultValue": "1",
      "metadata": {
        "description": "If you want the VM placed in an Azure Availability Zone, and the Azure region you are deploying to supports it, specify the number of the existing Availability Zone you want to use."
      },
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "type": "string"
    }
  },
  "variables": {
    "appInsightsApiVersion": "2015-04-01",
    "appInsightsComponentsApiVersion": "2015-05-01",
    "appInsightsName": "[if(empty(parameters('appInsights')), 'NOT_USED', parameters('appInsights'))]",
    "computeApiVersion": "2019-12-01",
    "customData": "[base64(concat('#!/bin/bash -x\n\n# Log to local file and serial console\nmkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\nLOG_FILE=/var/log/cloud/startup-script.log\ntouch ${LOG_FILE}\nnpipe=/tmp/$$.tmp\ntrap \"rm -f $npipe\" EXIT\nmknod $npipe p\ntee <$npipe -a ${LOG_FILE} /dev/ttyS0 &\nexec 1>&-\nexec 1>$npipe\nexec 2>&1\n\necho \"$(date  +\"%Y-%m-%dT%H:%M:%S.%3NZ\") : Starting Custom Script\"\n# Optional optimizations required as early in boot as possible before mcpd starts\n/usr/bin/setdb provision.extramb 500\n/usr/bin/setdb restjavad.useextramb true\n\n# VARS FROM TEMPLATE\nPACKAGE_URL=', variables('singleQuote'), variables('runtimeInitUrl'), variables('singleQuote'), '\nRUNTIME_CONFIG=',  variables('singleQuote'), parameters('runtimeConfig'), variables('singleQuote'), '\n\n# Render or download f5-bigip-runtime-init config\nif [[ \"${RUNTIME_CONFIG}\" =~ ^http.* ]]; then\n  curl -sfv --retry 60 --connect-timeout 5 -L \"${RUNTIME_CONFIG}\" -o /config/cloud/runtime-init.conf\nelse\n  printf ', variables('singleQuote'), '%s\\n', variables('singleQuote'), ' \"${RUNTIME_CONFIG}\" | jq . > /config/cloud/runtime-init.conf\nfi\n\n# Download and install f5-bigip-runtime-init package\nif [[ ! -s \"/var/config/rest/downloads/${PACKAGE_URL##*/}\" ]]; then\n  for i in {1..30}; do\n    curl -fv --retry 1 --connect-timeout 5 -L \"${PACKAGE_URL}\" -o \"/var/config/rest/downloads/${PACKAGE_URL##*/}\" && break || sleep 10\n  done\nfi\nbash \"/var/config/rest/downloads/${PACKAGE_URL##*/}\" -- ', variables('singleQuote'), '--cloud azure', variables('singleQuote'), '\n\n# Run\nf5-bigip-runtime-init --config-file /config/cloud/runtime-init.conf\n'))]",
    "networkApiVersion": "2020-05-01",
    "deploymentScript": "[resourceId('Microsoft.Resources/deploymentScripts', variables('deploymentScriptName'))]",
    "deploymentScriptName": "[concat(variables('appInsightsName'), '-metric-stub')]",
    "diagnosticsStorageAccountName": "[concat(uniqueString(parameters('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]",
    "extSettingsRef": {
      "commandToExecute": "[concat('echo -e ', variables('customData'), ' > /var/lib/waagent/customData; bash -c \"base64 -d /var/lib/waagent/customData | bash\"')]"
    },
    "functionAppName": "[concat(parameters('dnsLabel'), '-function')]",
    "identity": "[if(empty(parameters('userAssignManagedIdentity')), variables('identitySys'), variables('identitySysUser'))]",
    "identitySys": {
      "type": "SystemAssigned"
    },
    "identitySysUser": {
      "type": "[if(empty(parameters('roleDefinitionId')), 'UserAssigned', 'SystemAssigned, UserAssigned')]",
      "userAssignedIdentities": {
        "[parameters('userAssignManagedIdentity')]": {}
      }
    },
    "image": "[if(variables('useCustomImage'), parameters('image'), split(parameters('image'), ':'))]",
    "imagePlan": {
      "name": "[variables('skuToUse')]",
      "product": "[variables('offerToUse')]",
      "publisher": "f5-networks"
    },
    "imageReference": {
      "offer": "[variables('offerToUse')]",
      "publisher": "f5-networks",
      "sku": "[variables('skuToUse')]",
      "version": "[variables('versionToUse')]"
    },
    "mgmtNicName": "[concat(parameters('dnsLabel'), '-mgmt')]",
    "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddress')]",
    "networkSecurityGroup": {
      "id": "[parameters('nsgId')]"
    },
    "offerToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[1])]",
    "publicIPAddress": {
      "id": "[parameters('publicIPAddressId')]"
    },
    "roleAssignmentsApiVersion": "2017-09-01",
    "runtimeInitUrl": "https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.1.0/dist/f5-bigip-runtime-init-1.1.0-1.gz.run",
    "singleQuote": "'",
    "skuToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[2])]",
    "storageApiVersion": "2017-10-01",
    "storageProfileArray": {
      "customImage": {
        "imageReference": {
          "id": "[variables('image')]"
        }
      },
      "platformImage": {
        "imageReference": "[variables('imageReference')]",
        "osDisk": {
          "createOption": "FromImage"
        }
      }
    },
    "useCustomImage": "[contains(tolower(parameters('image')), 'microsoft.compute')]",
    "versionToUse": "[if(variables('useCustomImage'), json('null'), variables('image')[3])]",
    "vmId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('mgmtNicName')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(parameters('vmName'), '-ipconfig1')]",
            "properties": {
              "publicIPAddress": "[if(empty(parameters('publicIPAddressId')), json('null'), variables('publicIPAddress'))]",
              "privateIPAddress": "[if(equals(parameters('mgmtIpAddress'), 'DYNAMIC'), json('null'), variables('mgmtSubnetPrivateAddress'))]",
              "privateIPAllocationMethod": "[if(equals(parameters('mgmtIpAddress'), 'DYNAMIC'), 'Dynamic', 'Static')]",
              "subnet": {
                "id": "[parameters('subnetId')]"
              }
            }
          }
        ],
        "networkSecurityGroup": "[if(empty(parameters('nsgId')), json('null'), variables('networkSecurityGroup'))]"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'))]",
        "[variables('deploymentScript')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[parameters('vmName')]",
      "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mgmtNicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[parameters('vmName')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshKey')]",
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                }
              ]
            }
          }
        },
        "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "zones": "[if(parameters('useAvailabilityZones'), array(parameters('zoneChoice')), json('null'))]",
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('vmName'),'/onboarder')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "settings": "[variables('extSettingsRef')]",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('appInsightsComponentsApiVersion')]",
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "kind": "other",
      "location": "[resourceGroup().location]",
      "name": "[variables('appInsightsName')]",
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Application_Type": "other"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Insights/components"
    },
    {
      "apiVersion": "[variables('roleAssignmentsApiVersion')]",
      "condition": "[not(empty(parameters('roleDefinitionId')))]",
      "dependsOn": [
        "[variables('vmId')]"
      ],
      "name": "[guid(resourceGroup().id, 'roleId')]",
      "properties": {
        "principalId": "[reference(variables('vmId'), variables('computeApiVersion'), 'Full').identity.principalId]",
        "roleDefinitionId": "[parameters('roleDefinitionId')]",
        "scope": "[resourceGroup().id]"
      },
      "type": "Microsoft.Authorization/roleAssignments"
    },
    {
      "name": "[variables('deploymentScriptName')]",
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "dependsOn": [
        "[variables('appInsightsName')]"
      ],
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2019-10-01-preview",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[parameters('userAssignManagedIdentity')]": {}
        }
      },
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "properties": {
        "AzCliVersion": "2.0.80",
        "timeout": "PT30M",
        "environmentVariables": [
          {
            "name": "INSTRUMENTATION_KEY",
            "secureValue": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), variables('appInsightsComponentsApiVersion')).InstrumentationKey]"
          }
        ],
        "scriptContent": "NOW=$(date); METRICS=(\"F5_system_cpu\" \"F5_system_tmmCpu\" \"F5_system_memory\" \"F5_system_tmmMemory\" \"F5_system_networkInterfaces_mgmt_counters.bitsIn\" \"F5_system_networkInterfaces_1.0_counters.bitsIn\" \"F5_system_networkInterfaces_mgmt_counters.bitsOut\" \"F5_system_networkInterfaces_1.0_counters.bitsOut\" \"F5_system_tmmTraffic_clientSideTraffic.bitsIn\" \"F5_system_tmmTraffic_clientSideTraffic.bitsOut\" \"F5_system_tmmTraffic_serverSideTraffic.bitsIn\" \"F5_system_tmmTraffic_serverSideTraffic.bitsOut\"); for METRIC in \"${METRICS[@]}\"; do curl -d '{\"name\":\"MetricData\",\"time\":\"'\"${NOW}\"'\",\"iKey\":\"'\"${INSTRUMENTATION_KEY}\"'\",\"data\":{\"baseType\":\"MetricData\",\"baseData\":{\"metrics\":[{\"name\":\"'\"${METRIC}\"'\",\"value\":0,\"count\":0}]}}}' https://dc.services.visualstudio.com/v2/track; sleep 2; done",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "appInsightsComponentId": {
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/microsoft.insights/components/', parameters('appInsights'))]"
    },
    "appInsightsInstrumentationKey": {
      "condition": "[not(equals(variables('appInsightsName'), 'NOT_USED'))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), variables('appInsightsComponentsApiVersion')).InstrumentationKey]"
    },
    "roleAssignmentId": {
      "condition": "[not(empty(parameters('roleDefinitionId')))]",
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourcegroups/',  resourceGroup().name, '/providers/Microsoft.Authorization/roleAssignments/', guid(resourceGroup().id, 'roleId'))]"
    },
    "vmId": {
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
    }
  }
}
